module Language.Bracer.Backends.C.IdentifierStyle where
  
  import Text.Parser.Token
  import Text.Parser.Token.Style
  
  import qualified Data.HashSet as HashSet
  
  c99Idents :: TokenParsing m => IdentifierStyle m
  c99Idents = haskellIdents 
    { _styleReserved = HashSet.fromList 
      [ "->"
      , "++"
      , "--"
      , "&"
      , "*"
      , "+"
      , "-"
      , "~"
      , "!"
      , "/"
      , "%"
      , "<<"
      , ">>"
      , "/"
      , "%"
      , "<<"
      , ">>"
      , "<"
      , ">"
      , "<="
      , ">="
      , "=="
      , "!="
      , "^"
      , "|"
      , "&&"
      , "?"
      , ":"
      , ";"
      , "..."
      , "="
      , "*="
      , "/="
      , "%="
      , "+="
      , "-="
      , "<<="
      , ">>="
      , "&="
      , "^="
      , "|="
      , ","
      , "#"
      , "##"
      , "["
      , "]"
      , "?"
      , ":"
      , "?:"
      , "..."
      , "asm"
      , "auto"
      , "break"
      , "case"
      , "char"
      , "const"
      , "continue"
      , "default"
      , "do"
      , "double"
      , "else"
      , "enum"
      , "extern"
      , "float"
      , "for"
      , "goto"
      , "if"
      , "inline"
      , "int"
      , "long"
      , "register"
      , "restrict"
      , "return"
      , "short"
      , "signed"
      , "sizeof"
      , "static"
      , "struct"
      , "switch"
      , "typedef"
      , "union"
      , "unsigned"
      , "void"
      , "volatile"
      , "while"
      , "__asm"
      , "__attribute__"
      , "__inline"
      , "__inline__"
      , "__typeof__"
      , "__builtin_va_arg"
      , "__builtin_offsetof"
      , "__int128_t"
      , "__uint128_t"
      ]
    }